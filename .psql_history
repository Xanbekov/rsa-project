CREATE DATABASE hotel;CREATE USER hotel_admin WITH ENCRYPTED PASSWORD 'password';GRANT ALL PRIVILEGES ON DATABASE hotel TO hotel_admin;
psql(\q).
psql postgres
\l
\q
CREATE DATABASE three_tier_app;
\l
\q
CREATE DATABASE three_tier_app;
\q
CREATE TABLE users (    id SERIAL PRIMARY KEY,    username VARCHAR(50) UNIQUE NOT NULL,    password VARCHAR(100) NOT NULL,    email VARCHAR(100) UNIQUE NOT NULL);
CREATE TABLE categories (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL);
CREATE TABLE products (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL,    description TEXT,    price NUMERIC(10,2) NOT NULL,    category_id INTEGER REFERENCES categories(id));
CREATE TABLE categories (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL);
CREATE TABLE products (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL,    description TEXT,    price NUMERIC(10,2) NOT NULL,    category_id INTEGER REFERENCES categories(id));
clear 
\q
DROP DATABASE three_tier_app;
\q
CREATE DATABASE three_tier_app;
\l
\q
CREATE TABLE categories (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL);
CREATE TABLE products (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL,    description TEXT,    price NUMERIC(10,2) NOT NULL,    category_id INTEGER REFERENCES categories(id));
CREATE TABLE users (    id SERIAL PRIMARY KEY,    username VARCHAR(50) UNIQUE NOT NULL,    password VARCHAR(100) NOT NULL,    email VARCHAR(100) UNIQUE NOT NULL);
CREATE TABLE orders (    id SERIAL PRIMARY KEY,    user_id INTEGER REFERENCES users(id),    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
CREATE TABLE order_items (    id SERIAL PRIMARY KEY,    order_id INTEGER REFERENCES orders(id),    product_id INTEGER REFERENCES products(id),    quantity INTEGER NOT NULL,    unit_price NUMERIC(10,2) NOT NULL);
\dt
\q
CREATE DATABASE three_tier_app;
\c three_tier_app
\dt
\q
\du
psql -d three_tier_app -U amal
\dt
\q
CREATE DATABASE hotel_db;CREATE USER hotel_user WITH ENCRYPTED PASSWORD '55555';GRANT ALL PRIVILEGES ON DATABASE hotel_db TO hotel_user;\q
CREATE USER hotel_user WITH ENCRYPTED PASSWORD '55555';
\l
\du
GRANT ALL PRIVILEGES ON DATABASE hotel_db TO hotel_user;
\q
dropdb hotel_dbcreatedb hotel_dbCREATE TABLE guests (    guest_id SERIAL PRIMARY KEY,    first_name VARCHAR(100),    last_name VARCHAR(100),    email VARCHAR(100));
\q
CREATE TABLE guests (    guest_id SERIAL PRIMARY KEY,    first_name VARCHAR(100),    last_name VARCHAR(100),    email VARCHAR(100));
INSERT INTO guests (first_name, last_name, email)VALUES ('Иван', 'Иванов', 'ivanov@example.com'),       ('Мария', 'Петрова', 'petrova@example.com'),       ('Алексей', 'Смирнов', 'smirnov@example.com');
CREATE TABLE rooms (    room_id SERIAL PRIMARY KEY,    room_number INT,    room_type VARCHAR(100));
INSERT INTO rooms (room_number, room_type)VALUES (101, 'Single'),       (102, 'Double'),       (103, 'Suite');
SELECT * FROM guests;SELECT * FROM rooms;
CREATE TABLE bookings (    booking_id SERIAL PRIMARY KEY,    guest_id INT,    room_id INT,    check_in DATE,    check_out DATE,    FOREIGN KEY (guest_id) REFERENCES guests(guest_id),    FOREIGN KEY (room_id) REFERENCES rooms(room_id));
INSERT INTO bookings (guest_id, room_id, check_in, check_out)VALUES (1, 101, '2025-03-10', '2025-03-12'),       (2, 102, '2025-03-15', '2025-03-18'),       (3, 103, '2025-03-20', '2025-03-25');
SELECT * FROM rooms;
INSERT INTO rooms (room_number, room_type)VALUES (101, 'Single'),       (102, 'Double'),       (103, 'Suite');
INSERT INTO bookings (guest_id, room_id, check_in, check_out)VALUES (1, 101, '2025-03-10', '2025-03-12'),       (2, 102, '2025-03-15', '2025-03-18'),       (3, 103, '2025-03-20', '2025-03-25');
SELECT * FROM rooms;
psql hotel_dbDROP TABLE IF EXISTS bookings, rooms, guests CASCADE;
\q
\q
CREATE TABLE employees (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL,    position VARCHAR(100),    contact VARCHAR(100));CREATE TABLE repair_requests (    id SERIAL PRIMARY KEY,    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    description TEXT NOT NULL,    status VARCHAR(50) DEFAULT 'новая',    employee_id INT REFERENCES employees(id));CREATE TABLE equipment (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL,    location VARCHAR(100),    last_service_date DATE);CREATE TABLE clients (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL,    room_number INT,    issue TEXT);CREATE TABLE work_logs (    id SERIAL PRIMARY KEY,    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    employee_id INT REFERENCES employees(id),    work_done TEXT NOT NULL);
\d
\q
\q
CREATE TABLE employees (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL,    position VARCHAR(100),    contact VARCHAR(100));
CREATE TABLE repair_requests (    id SERIAL PRIMARY KEY,    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,    description TEXT NOT NULL,    status VARCHAR(50) DEFAULT 'новая',    employee_id INT REFERENCES employees(id));
\d
\q
CREATE DATABASE my_database;
\c my_database
CREATE TABLE users (    id SERIAL PRIMARY KEY,    name TEXT NOT NULL,    email TEXT UNIQUE NOT NULL);
INSERT INTO users (name, email) VALUES ('Иван Иванов', 'ivan@example.com');
SELECT * FROM users;
\q
psql postgresCREATE DATABASE hotel_management;\q
CREATE TABLE rooms (    id SERIAL PRIMARY KEY,    room_number INT NOT NULL,    room_type VARCHAR(50) NOT NULL,    price DECIMAL(10, 2) NOT NULL);CREATE TABLE guests (    id SERIAL PRIMARY KEY,    first_name VARCHAR(100),    last_name VARCHAR(100),    email VARCHAR(100) UNIQUE);CREATE TABLE bookings (    id SERIAL PRIMARY KEY,    guest_id INT REFERENCES guests(id),    room_id INT REFERENCES rooms(id),    check_in DATE,    check_out DATE);CREATE TABLE employees (    id SERIAL PRIMARY KEY,    first_name VARCHAR(100),    last_name VARCHAR(100),    role VARCHAR(50));CREATE TABLE services (    id SERIAL PRIMARY KEY,    service_name VARCHAR(100),    price DECIMAL(10, 2));
\q
psql -l
\q
CREATE ROLE postgres WITH LOGIN PASSWORD 'your_password';ALTER ROLE postgres CREATEDB;
CREATE ROLE postgres WITH LOGIN PASSWORD '55555';ALTER ROLE postgres CREATEDB;
GRANT ALL PRIVILEGES ON DATABASE hotel_management TO postgres;ALTER ROLE postgres WITH PASSWORD '55555';
GRANT ALL PRIVILEGES ON DATABASE hotel_management TO postgres;
nano server.jsnano server.js
\q
nano server.js
\q
CREATE TABLE rooms (  room_id SERIAL PRIMARY KEY,  room_number VARCHAR(10) NOT NULL,  type VARCHAR(50),  price DECIMAL);INSERT INTO rooms (room_number, type, price) VALUES('101', 'single', 100),('102', 'double', 150),('103', 'suite', 200);
\q
GRANT ALL PRIVILEGES ON TABLE rooms TO postgres;
\dp rooms
\q
CREATE DATABASE myapp;
\c myapp;   CREATE TABLE users (       id SERIAL PRIMARY KEY,       username VARCHAR(50) NOT NULL UNIQUE,       password VARCHAR(255) NOT NULL   );   CREATE TABLE products (       id SERIAL PRIMARY KEY,       name VARCHAR(100) NOT NULL,       price DECIMAL NOT NULL   );   CREATE TABLE orders (       id SERIAL PRIMARY KEY,       user_id INT REFERENCES users(id),       product_id INT REFERENCES products(id),       quantity INT NOT NULL   );   CREATE TABLE categories (       id SERIAL PRIMARY KEY,       name VARCHAR(50) NOT NULL   );   CREATE TABLE reviews (       id SERIAL PRIMARY KEY,       product_id INT REFERENCES products(id),       user_id INT REFERENCES users(id),       rating INT NOT NULL,       comment TEXT   );
\c myapp;   CREATE TABLE users (       id SERIAL PRIMARY KEY,       username VARCHAR(50) NOT NULL UNIQUE,       password VARCHAR(255) NOT NULL   );
 brew services list
\q
mkdir hotel_app && cd hotel_apppython3 -m venv venvsource venv/bin/activate
\q
CREATE DATABASE hotel_engineering;CREATE USER admin WITH ENCRYPTED PASSWORD 'password';GRANT ALL PRIVILEGES ON DATABASE hotel_engineering TO admin;\q
CREATE DATABASE hotel_db;
\c hotel_db;
CREATE USER hotel_user WITH PASSWORD 'password123';
GRANT ALL PRIVILEGES ON DATABASE hotel_db TO hotel_user;
-- Таблица с гостями отеляCREATE TABLE guests (    id SERIAL PRIMARY KEY,    name VARCHAR(100),    phone VARCHAR(20),    email VARCHAR(100),    check_in_date DATE,    check_out_date DATE);-- Таблица с номерами отеляCREATE TABLE rooms (    id SERIAL PRIMARY KEY,    room_number INT UNIQUE,    room_type VARCHAR(50),    price_per_night DECIMAL(10,2),    status VARCHAR(20) DEFAULT 'available');-- Таблица с бронированиямиCREATE TABLE bookings (    id SERIAL PRIMARY KEY,    guest_id INT REFERENCES guests(id),    room_id INT REFERENCES rooms(id),    check_in DATE,    check_out DATE,    total_price DECIMAL(10,2));-- Таблица с сотрудниками отеляCREATE TABLE staff (    id SERIAL PRIMARY KEY,    name VARCHAR(100),    position VARCHAR(50),    phone VARCHAR(20),    email VARCHAR(100));-- Таблица с заявками на ремонтCREATE TABLE maintenance_requests (    id SERIAL PRIMARY KEY,    room_id INT REFERENCES rooms(id),    description TEXT,    status VARCHAR(20) DEFAULT 'pending',    request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
\dt
\d guests
\q
DROP DATABASE IF EXISTS hotel_db;DROP USER IF EXISTS hotel_user;
\q
CREATE DATABASE hotel_db;
\c hotel_db;
CREATE USER hotel_user WITH PASSWORD 'password123';
GRANT ALL PRIVILEGES ON DATABASE hotel_db TO hotel_user;
-- Таблица с гостями отеляCREATE TABLE guests (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL,    phone VARCHAR(20) NOT NULL,    email VARCHAR(100) UNIQUE NOT NULL,    check_in_date DATE,    check_out_date DATE);-- Таблица с номерами отеляCREATE TABLE rooms (    id SERIAL PRIMARY KEY,    room_number INT UNIQUE NOT NULL,    room_type VARCHAR(50) NOT NULL,    price_per_night DECIMAL(10,2) NOT NULL,    status VARCHAR(20) DEFAULT 'available');-- Таблица с бронированиямиCREATE TABLE bookings (    id SERIAL PRIMARY KEY,    guest_id INT REFERENCES guests(id) ON DELETE CASCADE,    room_id INT REFERENCES rooms(id) ON DELETE CASCADE,    check_in DATE NOT NULL,    check_out DATE NOT NULL,    total_price DECIMAL(10,2) NOT NULL);-- Таблица с сотрудниками отеляCREATE TABLE staff (    id SERIAL PRIMARY KEY,    name VARCHAR(100) NOT NULL,    position VARCHAR(50) NOT NULL,    phone VARCHAR(20) NOT NULL,    email VARCHAR(100) UNIQUE NOT NULL);-- Таблица с заявками на ремонтCREATE TABLE maintenance_requests (    id SERIAL PRIMARY KEY,    room_id INT REFERENCES rooms(id) ON DELETE CASCADE,    description TEXT NOT NULL,    status VARCHAR(20) DEFAULT 'pending',    request_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
\dt
\d guests
\q
CREATE DATABASE hotel;
\q
CREATE DATABASE hotel;
\c hotel
CREATE TABLE Users (    id SERIAL PRIMARY KEY,    username VARCHAR(255) NOT NULL,    password VARCHAR(255) NOT NULL,    email VARCHAR(255));CREATE TABLE Rooms (    id SERIAL PRIMARY KEY,    room_number INT NOT NULL,    capacity INT,    price DECIMAL(10, 2));CREATE TABLE Bookings (    id SERIAL PRIMARY KEY,    user_id INT REFERENCES Users(id),    room_id INT REFERENCES Rooms(id),    check_in DATE,    check_out DATE);CREATE TABLE Payments (    id SERIAL PRIMARY KEY,    booking_id INT REFERENCES Bookings(id),    amount DECIMAL(10, 2),    payment_date DATE);CREATE TABLE Services (    id SERIAL PRIMARY KEY,    service_name VARCHAR(255),    service_price DECIMAL(10, 2));
\dt
mkdir hotel_projectcd hotel_projectpython3 -m venv venvsource venv/bin/activatepip install flask flask_sqlalchemy psycopg2
\q
CREATE DATABASE hotel_db;
CREATE USER hotel_admin WITH ENCRYPTED PASSWORD 'securepassword';GRANT ALL PRIVILEGES ON DATABASE hotel_db TO hotel_admin;
\du
ALTER USER hotel_admin WITH ENCRYPTED PASSWORD '55555';
psql -U hotel_admin -d hotel_db
\q
\q
CREATE DATABASE hotel_requests;
\c hotel_requests;
\q
CREATE DATABASE hotel_requests;
\c hotel_requests;
CREATE TABLE users (    id SERIAL PRIMARY KEY,    name TEXT NOT NULL,    email TEXT UNIQUE NOT NULL,    password TEXT NOT NULL,    role_id INTEGER REFERENCES roles(id));
CREATE TABLE roles (    id SERIAL PRIMARY KEY,    role_name TEXT UNIQUE NOT NULL);
CREATE TABLE requests (    id SERIAL PRIMARY KEY,    user_id INTEGER REFERENCES users(id),    room_id INTEGER REFERENCES rooms(id),    description TEXT NOT NULL,    status_id INTEGER REFERENCES request_statuses(id),    created_at TIMESTAMP DEFAULT current_timestamp);
CREATE TABLE request_statuses (    id SERIAL PRIMARY KEY,    status_name TEXT UNIQUE NOT NULL);
CREATE TABLE rooms (    id SERIAL PRIMARY KEY,    room_number TEXT UNIQUE NOT NULL);
CREATE TABLE requests (    id SERIAL PRIMARY KEY,    user_id INTEGER REFERENCES users(id),    room_id INTEGER REFERENCES rooms(id),    description TEXT NOT NULL,    status_id INTEGER REFERENCES request_statuses(id),    created_at TIMESTAMP DEFAULT current_timestamp);
CREATE TABLE roles (    id SERIAL PRIMARY KEY,    role_name TEXT UNIQUE NOT NULL);
CREATE TABLE users (    id SERIAL PRIMARY KEY,    name TEXT NOT NULL,    email TEXT UNIQUE NOT NULL,    password TEXT NOT NULL,    role_id INTEGER REFERENCES roles(id));
\dt
CREATE TABLE requests (    id SERIAL PRIMARY KEY,    user_id INTEGER REFERENCES users(id),    room_id INTEGER REFERENCES rooms(id),    description TEXT NOT NULL,    status_id INTEGER REFERENCES request_statuses(id),    created_at TIMESTAMP DEFAULT current_timestamp);
\dt
INSERT INTO roles (role_name) VALUES ('Инженер'), ('Администратор');
INSERT INTO users (name, email, password, role_id) VALUES ('Алексей', 'alex@mail.com', '123456', 1),       ('Иван', 'ivan@mail.com', 'qwerty', 2);
INSERT INTO rooms (room_number) VALUES ('101'), ('102'), ('103');
INSERT INTO request_statuses (status_name) VALUES ('В ожидании'), ('Выполняется'), ('Выполнено');
SELECT * FROM users;
\q
CREATE DATABASE hotel_db;
CREATE USER hotel_admin WITH ENCRYPTED PASSWORD 'password123';
GRANT ALL PRIVILEGES ON DATABASE hotel_db TO hotel_admin;
psql -U hotel_admin -d hotel_db
\q
pip3 install fastapi uvicorn psycopg2 sqlalchemypython3 -c "import fastapi; print('FastAPI установлен!')"pip3 install fastapi uvicorn psycopg2 sqlalchemy
\q
